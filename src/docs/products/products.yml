paths:
  /api/products/:
    get:
      summary: get all products with pagination
      tags:
        - Products
      parameters: 
        - in: query
          name: page
          schema:
            type: number
          description: The number of page to return
        - in: query
          name: limit
          schema:
            type: number
          description: The number of products to return per page
        - in: query
          name: sort
          schema:
            type: string
            enum:
              - desc
              - asc 
              - ascending
              - descending
          description: Sort the products by price ascending or descending
        - in: query
          name: status
          schema:
            type: boolean
          description: Return the products with the status false or true
        - in: query
          name: category
          schema:
            type: string
          description: Returns the products with the category is given
      responses:
        "200":
          description: get all products with pagination
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Product"
        "400":
          description: bad request
  /api/pets/{pid}/:
    delete:
      summary: delete pets by id
      tags:
        - Pets
      parameters:
        - name: pid
          in: path
          required: true
          description: id of pet
          schema:
            $type: ObjectId
      responses:
        "200":
          description: delete pet by id info
        "500":
          description: server side error
components:
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Id generated by mongo
        title:
          type: string
          description: title of the product
        description:
          type: string
          description: description of the product
        price:
          type: number
          description: price of the product
        thumbnail:
          type: array
          items:
            type: string
            format: uri
          description: array of url of images of the product
        stock:
          type: number
          description: numer of product in existance 
        code:
          type: number
          description: unique code for the product identification
        status:
          type: boolean
          description: boolean estate that indicates if is available or not
        category:
          type: string
          description: category of the product 
        owner:
          type: string
          description: mongo id of the person that create the product
      required: 
        - _id
        - title
        - description
        - price
        - thumbnail
        - stock
        - code
        - status
        - category
        - owner
      example:
        _id: 6f38b062-b913
        name: shamu
        specie: dog
        birthDate: 2018-01-01
        adopted: true
        image: <binary>